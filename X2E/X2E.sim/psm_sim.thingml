/* This is the PSM the Platform Specific Model */
/*** This version contains a SIMULATED platform */
/* This version has possibility to change the polling intervals for temperature */
import "datatypes.thingml"
import "pim_messages.thingml"
import "psm_datatypes_sim.thingml"

thing Window includes WindowMsg, TemperatureMsg, OnOffMsg, MagnetMsg{
	provided port temp_input {receives singletemperature}
	provided port magnet_input {receives singleopened, singleshut}
	provided port input {receives set_id,SwitchOn, SwitchOff, set_temperature}
	required port output {sends temperature, opened, shut}
	required port heater_output {sends SwitchOn, SwitchOff}
	required port debug_settemp {sends set_temperature}
	
	property wid:Integer
	property window_state:Boolean = false
	property heater_state:Boolean
	property heater_lastpim:Boolean
	property sat_temperature:Double = 0
	property last_temperature:Double = 0
	
	statechart behaviourWindow init Init {
		state Init {
			transition -> Running
			event id:input?set_id
			action do
				wid = id.wid
				println("Window"+wid+": GOT WINDOW ID: " + wid)
			end
		}
		
		state Running{
			transition -> Running
			event temp:input?set_temperature
			action do
			if(temp.t >= 10 and temp.t <= 30) do
				println("Window"+wid+": Sat Temperature to " + temp.t)
				sat_temperature = temp.t
				debug_settemp!set_temperature(sat_temperature)
			end
			else do
				println("Window"+wid+": Temp is out of range: " + temp.t)
			end
			end
			
			transition -> Running
			event temp:temp_input?singletemperature
			action do
			println("Window"+wid+": Received temp: " + temp.t)
				last_temperature = temp.t
				if(sat_temperature >= 10) do
					if((sat_temperature - 7) > last_temperature) do
						println("Window"+wid+": window open, but too cold, keep heater on")
						if(not heater_state) do
						heater_state = true
						heater_output!SwitchOn(0)
						end
					end
					else if(window_state) do
						println("Window"+wid+": window open, turn off heater")
						if(heater_state) do
						heater_state = false
						heater_output!SwitchOff(0)
						end
					end
				end
				println("Window"+wid+": Sending temp to pid")
				output!temperature(wid,"Window " + wid,last_temperature)
			end
			
			transition -> Running
			event magnet_input?singleopened
			guard not window_state
			action do
			println("Window"+wid+": Window Opened")
				window_state = true
				if((sat_temperature - 7) < last_temperature) do
					println("Window"+wid+": turning off heater")
					if(heater_state) do
					heater_state = false
					heater_output!SwitchOff(0)
					end
				end
				output!opened(wid)
			end
			
			transition -> Running
			event magnet_input?singleshut
			guard window_state
			action do
			println("Window"+wid+": window shut")
				window_state = false
				output!shut(wid)
				if(heater_lastpim) do
				heater_state = true
				heater_output!SwitchOn(0)
				end
			end
			
			transition -> Running
			event input?SwitchOn
			action do
			println("Window"+wid+": Got told to turn on heater")
				if(not heater_state) do
				heater_state = true
				heater_output!SwitchOn(0)
				end
			end
			
			transition -> Running
			event input?SwitchOff
			action do
			println("Window"+wid+": Got told to turn off heater")
				if(heater_state) do
				heater_state = false
				heater_output!SwitchOff(0)
				end
			end
		}
	}
}

//SIMULATION
thing WindowSim includes MagnetMsg, OnOffMsg, TemperatureMsg
@mock "true"
{
	required port give_values {
		sends singleopened, singleshut, singletemperature
	}
	provided port show_onoff {
		receives SwitchOn, SwitchOff
	}
	provided port show_temp {
		receives set_temperature
	}
}

thing RoomSim includes TemperatureMsg, GeneralMsg, OnOffMsg, MagnetMsg
@mock "true"
{
	required port give_values {
		sends set_temperature, singletemperature, singleopened, singleshut, singlelocked
	}
	provided port messages {
		receives prompt, temperature
	}	
	provided port show_onoff {
		receives SwitchOn, SwitchOff
	}
}