/* ThingML Framework */

// Base datatypes
import "datatypes.thingml"

/* PSM must be included */
import "psm_sim.thingml"
import "psm_datatypes_sim.thingml"
import "pim_messages.thingml"

thing PIM includes GeneralMsg, TemperatureMsg, OnOffMsg, WindowMsg, MagnetMsg {
	provided port initial {
		receives Ready
	}
	required port thermostat_output {
		sends prompt
	}
	provided port thermostat_input {
		receives set_temperature
	}
	provided port thermo_input {
		receives temperature
	}
	required port wall_heater {
		sends SwitchOn, SwitchOff
	}
	required port window1_output {
		sends set_id, set_temperature, singletemperature, SwitchOff, SwitchOn
	}
	required port thermo_output {
		sends add_thermometer
	}
	required port device_output {
		sends add_device
	}
	provided port windows_input {
		receives opened, shut
	}
	required port window2_output {
		sends set_id, set_temperature, singletemperature,  SwitchOff, SwitchOn
	}
	provided port door_input {
		receives singleopened, singlelocked
	}
	
	// Temperature Control	
	property tmrature:Double = 0 
	property temp_up_or_down:Integer = 0 // 0 = no on or off message sent yet, 1 = off 2 = on;
	
	// Magnet swtiches states
	property window1_state:Boolean = true //starts closed
	property window2_state:Boolean = true // starts closed
	
	// Got temp from windows?
	property window1_gotTemp:Boolean = false
	property window2_gotTemp:Boolean = false
	
	// Last read temperatures
	property temp_wall:Double = 0
	property wall_gotTemp:Boolean = false
	property temp_window1:Double = 0
	property temp_window2:Double = 0
	
	// Rooms average temperature
	property viableTemps:Integer = 0
	property avgTemp:Double = 0
	property tempSum:Double = 0
	
	function UpdateHeaters() do
		viableTemps = 0
		tempSum = 0
		
		// Check if the window temperature can be used for average calculation
		if(window1_state and window1_gotTemp) do
		viableTemps++
		tempSum = tempSum + temp_window1
		end
		
		// Check if the window temperature can be used for average calculation
		if(window2_state and window2_gotTemp) do
		viableTemps++
		tempSum = tempSum + temp_window2
		end
		
		// Check if the window temperature can be used for average calculation
		if(wall_gotTemp) do
		viableTemps++
		tempSum = tempSum + temp_wall
		end
		
		// Only calculate average temp and adjust heaters if we have gotten at least one temperature from the room.
		if (viableTemps > 0) do
			avgTemp = tempSum/viableTemps
		
			thermostat_output!prompt("Average Temp is = " + avgTemp)
		
			// Initial
			if(temp_up_or_down == 0) do
				if(avgTemp>=tmrature-1) do
					temp_up_or_down = 1
				end
				
				else do
					wall_heater!SwitchOn(0)
					window1_output!SwitchOn(1)
					window2_output!SwitchOn(2)
					temp_up_or_down = 2
				end
			end
						
			// Decrease Temp
			else if(temp_up_or_down == 1 and avgTemp < tmrature - 1) do
				wall_heater!SwitchOn(0)
				window1_output!SwitchOn(1)
				window2_output!SwitchOn(2)
				temp_up_or_down = 2
			end
						
			// Increase Temp
			else if(temp_up_or_down == 2 and avgTemp > tmrature + 1) do
				wall_heater!SwitchOff(0)
				window1_output!SwitchOff(1)
				window2_output!SwitchOff(2)
				temp_up_or_down = 1
			end
		end
	end
	
	statechart PIM_behavior init Init {
		
		state Init {
			transition -> Running
			event initial?Ready
		}
		

		composite state Running init DoorNotLocked keeps history {
			on entry do
			// Register heater and thermometer
			thermo_output!add_thermometer(0, "Wall Thermometer")
			device_output!add_device(0)
			// Add windows
			window1_output!set_id(1)
			window2_output!set_id(2)
			
			wall_heater!SwitchOff(0)
			end	
		
			state DoorNotLocked {
				transition -> DoorNotLocked
				event temp:thermo_input?temperature
				action do
				println("GOT TEMP id:" + temp.id)
				if(temp.id == 0) do
					wall_gotTemp = true
					temp_wall = temp.t				
				end
				else if(temp.id == 1) do
					window1_gotTemp = true
					temp_window1 = temp.t
					window1_output!singletemperature(temp_window1)
				end
				else if (temp.id == 2) do
					window2_gotTemp = true
					temp_window2 = temp.t
					window2_output!singletemperature(temp_window2)
				end
					UpdateHeaters()
				end
				transition -> DoorNotLocked
				event opened:windows_input?opened
				action do
					if(opened.wid == 1) do
						window1_state = false
					end
					else if(opened.wid == 2) do
						window2_state = false
					end
					UpdateHeaters()
				end
				transition -> DoorNotLocked
				event shut:windows_input?shut
				action do
					if(shut.wid == 1) do
						window1_state = true
					end
					else if(shut.wid == 2) do
						window2_state = true
					end
					UpdateHeaters()
				end
				transition -> DoorLocked
				event door_input?singlelocked
				action do
					if(not window1_state or not window2_state) do
						if(window1_state and not window2_state) do
							thermostat_output!prompt("WARNING: Window 2 is open!")
						end
						else if(not window1_state and window2_state) do
							thermostat_output!prompt("WARNING: Window 1 is open!")
						end
						else do
							thermostat_output!prompt("WARNING: Both windows are open!")
						end
					end
				end
				transition -> DoorNotLocked
				event set_temp:thermostat_input?set_temperature//set_temp:human_input?set_temperature
				action do
					if(set_temp.t > 30) do
						tmrature = 30
					end
					else if(set_temp.t < 10)do
						tmrature = 10
					end
					else do
						tmrature = set_temp.t
					end
					window1_output!set_temperature(tmrature)
					window2_output!set_temperature(tmrature)
					thermostat_output!prompt("Temperature sat to " + tmrature)
					UpdateHeaters()
				end
			}
			
			state DoorLocked {
				transition -> DoorLocked
				event temp:thermo_input?temperature
				action do
				if(temp.id == 0) do
					wall_gotTemp = true
					temp_wall = temp.t				
				end
				else if(temp.id == 1) do
					window1_gotTemp = true
					temp_window1 = temp.t
					window1_output!singletemperature(temp_window1)
				end
				else if (temp.id == 2) do
					window2_gotTemp = true
					temp_window2 = temp.t
					window2_output!singletemperature(temp_window2)
				end
					UpdateHeaters()
				end
				transition -> DoorLocked
				event opened:windows_input?opened
				action do
					if(opened.wid == 1) do
						window1_state = false
					end
					else if(opened.wid == 2) do
						window2_state = false
					end
					UpdateHeaters()
					thermostat_output!prompt("ALARM: Window" + opened.wid + " was opened!")
				end
				transition -> DoorLocked
				event shut:windows_input?shut
				action do
					if(shut.wid == 1) do
						window1_state = true
					end
					else if(shut.wid == 2) do
						window2_state = true
					end
					UpdateHeaters()
				end
				transition -> DoorLocked
				event set_temp:thermostat_input?set_temperature
				action do
					if(set_temp.t > 30) do
						tmrature = 30
					end
					else if(set_temp.t < 10)do
						tmrature = 10
					end
					else do
						tmrature = set_temp.t
					end
					window1_output!set_temperature(tmrature)
					window2_output!set_temperature(tmrature)
					UpdateHeaters()
				end
				
				transition -> DoorNotLocked
				event door_input?singleopened
			}		
		} // end Running
	} // end PIM_behavior
} // end PIM thing


thing Window includes WindowMsg, TemperatureMsg, OnOffMsg, MagnetMsg{
	provided port magnet_input {receives singleopened, singleshut}
	provided port input {receives set_id,SwitchOn, singletemperature, SwitchOff, set_temperature}
	required port output {sends opened, shut}
	required port heater_output {sends SwitchOn, SwitchOff}
	required port debug_settemp {sends set_temperature}
	
	property wid:Integer = -1
	property window_state:Boolean = false
	property heater_state:Boolean = false
	property heater_lastpim:Boolean = false
	property sat_temperature:Double = 0
	property last_temperature:Double = 0
	
	statechart behaviourWindow init Init {
		state Init {
			transition -> Running
			event id:input?set_id
			action do
				wid = id.wid
			end
		}
		
		state Running{
			transition -> Running
			event temp:input?set_temperature
			action do
				sat_temperature = temp.t
				debug_settemp!set_temperature(sat_temperature)
			end
			
			transition -> Running
			event temp:input?singletemperature
			action do
				last_temperature = temp.t
				if(sat_temperature >= 10) do
					if((sat_temperature - 7) > last_temperature) do
						if(not heater_state) do
						heater_state = true
						heater_output!SwitchOn(wid)
						end
					end
					else if(window_state) do
						if(heater_state) do
						heater_state = false
						heater_output!SwitchOff(wid)
						end
					end
				end
			end
			
			transition -> Running
			event magnet_input?singleopened
			guard not window_state
			action do
				window_state = true
				if(((sat_temperature - 7) < last_temperature) and heater_state) do
					heater_state = false
					heater_output!SwitchOff(wid)
				end
				output!opened(wid)
			end
			
			transition -> Running
			event magnet_input?singleshut
			guard window_state
			action do
				window_state = false
				output!shut(wid)
				if(heater_lastpim and not heater_state) do
				heater_state = true
				heater_output!SwitchOn(wid)
				end
				else if(not heater_lastpim and heater_state) do
				heater_state = false
				heater_output!SwitchOff(wid)
				end
			end
			
			transition -> Running
			event input?SwitchOn
			action do
				heater_lastpim = true
				if(not heater_state) do
				heater_state = true
				heater_output!SwitchOn(wid)
				end
			end
			
			transition -> Running
			event input?SwitchOff
			action do
				heater_lastpim = false
				if(heater_state) do
				heater_state = false
				heater_output!SwitchOff(wid)
				end
			end
		}
		
		// Event Driven Approach Attempt
/* 
 * Problem with using states for window environment
 * 
 * The heater can be both on or off when the window is open. 
 * Going from Closed : On to Open : On is not possible as you cannot decide on what sub-state to transition to.
 * 
 * It seems the code is the most compact and readable using only a single state and a data driven approach.
 * 
 * 
 * Here is the attempted event based approach using WindowOpen and WindowClosed states with HeaterOn and HeaterOff sub-states.

		composite state WindowClosed init HeaterOff {
			
			state HeaterOff {
			on entry do
			if(heater_state) do 
				heater_state = false
				heater_output!SwitchOff(0)
			end
			end
				
			transition -> HeaterOff
			event temp:input?set_temperature
			action do
				sat_temperature = temp.t
				debug_settemp!set_temperature(sat_temperature)
			end
			
			transition -> HeaterOff
			event temp:temp_input?singletemperature
			action do
				last_temperature = temp.t
				// Turn on the heater if the temperature is more than 7 degrees lower than the sat temperature (if the temperature is sat).
				if((sat_temperature >= 10) and (sat_temperature - 7) > last_temperature) do
					heater_state = true
					heater_output!SwitchOn(0)
				end
				output!temperature(wid,"Window " + wid,last_temperature)
			end
			
			transition -> HeaterOn
			event input?SwitchOn
			action do
				heater_lastpim = true
			end
			
			}
			
			state HeaterOn {
			on entry do
			if(not heater_state) do
				heater_state = true
				heater_output!SwitchOn(0)
			end
			end
				
			transition -> HeaterOn
			event temp:input?set_temperature
			action do
				sat_temperature = temp.t
				debug_settemp!set_temperature(sat_temperature)
			end
			
			transition -> HeaterOn
			event temp:temp_input?singletemperature
			action do
				last_temperature = temp.t
				output!temperature(wid,"Window " + wid,last_temperature)
			end
			
			transition -> HeaterOff
			event input?SwitchOff
			action do
				heater_lastpim = false
			end
			}
		
		transition -> WindowOpen
			event magnet_input?singleopened
			guard ((sat_temperature - 7) < last_temperature) and heater_state
			action do
				heater_state = false
				heater_output!SwitchOff(0)
			end
			
		}
		
		composite state WindowOpen init HeaterOff {
			on entry do
				output!opened(wid)
			end
			
			
			state HeaterOff {
				on entry do
				if(heater_state) do 
					heater_state = false
					heater_output!SwitchOff(0)
				end
				end
				
			}
			
			state HeaterOn {
				on entry do
				if(not heater_state) do
					heater_state = true
					heater_output!SwitchOn(0)
				end
				end
				
			}
		}
*/
	}
}
