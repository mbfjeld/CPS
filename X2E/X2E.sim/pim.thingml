/* ThingML Framework */

// Base datatypes
import "datatypes.thingml"

/* PSM must be included */
import "psm_sim.thingml"
import "psm_datatypes_sim.thingml"
import "pim_messages.thingml"

thing PIM includes GeneralMsg, TemperatureMsg, OnOffMsg, WindowMsg, MagnetMsg {
	required port thermostat_output {
		sends prompt
	}
	provided port thermostat_input {
		receives set_temperature
	}
	provided port wall_temp {
		receives singletemperature
	}
	required port wall_heater {
		sends SwitchOn, SwitchOff
	}
	required port window1_output {
		sends set_id, set_temperature, SwitchOff, SwitchOn
	}
	provided port windows_input {
		receives opened, shut, temperature
	}
	required port window2_output {
		sends set_id, set_temperature,  SwitchOff, SwitchOn
	}
	provided port door_input {
		receives singleopened, singlelocked
	}
	
	property tmrature:Double = 0   // the requested temperature for the room
	
	property temp_up_or_down:Integer = 0 // 0 = no on or off message sent yet, 1 = off 2 = on;
	
	// Magnet swtiches states
	property window1_state:Boolean = true //starts closed
	property window2_state:Boolean = true // starts closed
	
	// Got temp from windows?
	property window1_gotTemp:Boolean = false
	property window2_gotTemp:Boolean = false
	
	// Last read temperatures
	property temp_wall:Double = 0
	property temp_window1:Double = 0
	property temp_window2:Double = 0
	
	// Rooms average temperature
	property avgTemp:Double = 0
	
	function UpdateHeaters() do
		println("Calculating average temperature")
		
		// Only wall is viable
		if(not (window1_state and window1_gotTemp) and not (window2_state and window2_gotTemp)) do
			println("Only wall is viable temperature")
			avgTemp = temp_wall
		end
		
		// Window 1 and wall is viable
		else if((window1_state and window1_gotTemp) and not (window2_state and window2_gotTemp)) do
			println("Wall and window1 are viable temperatures")
			avgTemp = (temp_wall + temp_window1)/2
		end
		
		// Window 2 and wall is viable
		else if(not (window1_state and window1_gotTemp) and (window2_state and window2_gotTemp)) do
			println("Wall and window2 are viable temperatures")
			avgTemp = (temp_wall + temp_window2)/2
		end
		
		// Both windows and wall is viable
		else if((window1_state and window1_gotTemp) and (window2_state and window2_gotTemp)) do
			println("Wall and both windows are viable temperatures")
			avgTemp = (temp_wall + temp_window1 + temp_window2)/3
		end
		
		println("Average Temp is = " + avgTemp)
		thermostat_output!prompt("Average Temp is = " + avgTemp)
		
		
		println("Turning heaters on or off")
		// Initial
		if(temp_up_or_down == 0) do
			if(avgTemp>=tmrature-1) do
				temp_up_or_down = 1
			end
			else do
				wall_heater!SwitchOn(0)
				window1_output!SwitchOn(1)
				window2_output!SwitchOn(2)
				temp_up_or_down = 2
			end
		end
						
		// Decrease Temp
		else if(temp_up_or_down == 1) do
			if(avgTemp<tmrature-1) do
				wall_heater!SwitchOn(0)
				window1_output!SwitchOn(1)
				window2_output!SwitchOn(2)
				temp_up_or_down = 2
			end
		end
						
		// Increase Temp
		else if(temp_up_or_down == 2) do
			if(avgTemp>tmrature+1) do
				wall_heater!SwitchOff(0)
				window1_output!SwitchOff(1)
				window2_output!SwitchOff(2)
				temp_up_or_down = 1
			end
		end
	end
	
	statechart PIM_behavior init Running {
		
		composite state Running init DoorNotLocked keeps history {
		on entry do
			// Add windows
			window1_output!set_id(1)
			window2_output!set_id(2)
		end	
					
			state DoorNotLocked {
				transition -> DoorNotLocked
				event temp:wall_temp?singletemperature
				action do
					temp_wall = temp.t
					UpdateHeaters()
				end
				transition -> DoorNotLocked
				event temp:windows_input?temperature
				action do
				if(temp.id == 1) do
				window1_gotTemp = true
				temp_window1 = temp.t
				end
				else if (temp.id == 2) do
				window2_gotTemp = true
				temp_window2 = temp.t
				end
					UpdateHeaters()
				end
				transition -> DoorNotLocked
				event opened:windows_input?opened
				action do
					if(opened.wid == 1) do
						window1_state = false
					end
					else if(opened.wid == 2) do
						window2_state = false
					end
					UpdateHeaters()
				end
				transition -> DoorNotLocked
				event shut:windows_input?shut
				action do
					if(shut.wid == 1) do
						window1_state = true
					end
					else if(shut.wid == 2) do
						window2_state = true
					end
					UpdateHeaters()
				end
				transition -> DoorLocked
				event door_input?singlelocked
				action do
					if(not window1_state or not window2_state) do
						println("WARNING, DOOR LOCKED WITH WINDOW OPEN")
						if(window1_state and not window2_state) do
							thermostat_output!prompt("WARNING: Window 2 is open!")
						end
						if(not window1_state and window2_state) do
							thermostat_output!prompt("WARNING: Window 1 is open!")
						end
						else do
							thermostat_output!prompt("WARNING: Both windows are open!")
						end
					end
				end
				transition -> DoorNotLocked
				event set_temp:thermostat_input?set_temperature//set_temp:human_input?set_temperature
				action do
					if(set_temp.t > 30) do
						tmrature = 30
					end
					else if(set_temp.t < 10)do
						tmrature = 10
					end
					else do
						tmrature = set_temp.t
					end
					window1_output!set_temperature(tmrature)
					window2_output!set_temperature(tmrature)
					thermostat_output!prompt("Temperature sat to " + tmrature)
					UpdateHeaters()
				end
			}
			
			state DoorLocked {			
				transition -> DoorLocked
				event temp:wall_temp?singletemperature
				action do
					temp_wall = temp.t
					UpdateHeaters()
				end
				transition -> DoorLocked
				event temp:windows_input?temperature
				action do
				if(temp.id == 1) do
				window1_gotTemp = true
				temp_window1 = temp.t
				end
				else if (temp.id == 2) do
				window2_gotTemp = true
				temp_window2 = temp.t
				end
					UpdateHeaters()
				end
				transition -> DoorLocked
				event opened:windows_input?opened
				action do
					if(opened.wid == 1) do
						window1_state = false
					end
					else if(opened.wid == 2) do
						window2_state = false
					end
					UpdateHeaters()
					println("ALARM: Window" + opened.wid + " was opened while in a locked state!")
					thermostat_output!prompt("ALARM: Window" + opened.wid + " was opened!")
				end
				transition -> DoorLocked
				event shut:windows_input?shut
				action do
					if(shut.wid == 1) do
						window1_state = true
					end
					else if(shut.wid == 2) do
						window2_state = true
					end
					UpdateHeaters()
				end
				transition -> DoorLocked
				event set_temp:thermostat_input?set_temperature
				action do
					if(set_temp.t > 30) do
						tmrature = 30
					end
					else if(set_temp.t < 10)do
						tmrature = 10
					end
					else do
						tmrature = set_temp.t
					end
					window1_output!set_temperature(tmrature)
					window2_output!set_temperature(tmrature)
					thermostat_output!prompt("Temperature sat to " + tmrature)
					UpdateHeaters()
				end
				
				transition -> DoorNotLocked
				event door_input?singleopened
			}		
		} // end Running
	} // end PIM_behavior
} // end PIM thing